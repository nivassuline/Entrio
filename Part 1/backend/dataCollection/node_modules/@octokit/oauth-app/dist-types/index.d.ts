import { type GetUserOctokitWithStateInterface } from "@octokit/oauth-app/dist-types/methods/get-user-octokit.js";
import { type GetWebFlowAuthorizationUrlInterface } from "@octokit/oauth-app/dist-types/methods/get-web-flow-authorization-url.js";
import { type CreateTokenInterface } from "@octokit/oauth-app/dist-types/methods/create-token.js";
import { type CheckTokenInterface } from "@octokit/oauth-app/dist-types/methods/check-token.js";
import { type ResetTokenInterface } from "@octokit/oauth-app/dist-types/methods/reset-token.js";
import { type RefreshTokenInterface } from "@octokit/oauth-app/dist-types/methods/refresh-token.js";
import { type ScopeTokenInterface } from "@octokit/oauth-app/dist-types/methods/scope-token.js";
import { type DeleteTokenInterface } from "@octokit/oauth-app/dist-types/methods/delete-token.js";
import { type DeleteAuthorizationInterface } from "@octokit/oauth-app/dist-types/methods/delete-authorization.js";
import type { AddEventHandler, ClientType, ClientTypeFromOptions, ConstructorOptions, OctokitTypeFromOptions, Options } from "@octokit/oauth-app/dist-types/types.js";
export type { HandlerOptions, OctokitRequest, OctokitResponse, } from "@octokit/oauth-app/dist-types/middleware/types.js";
export { handleRequest } from "@octokit/oauth-app/dist-types/middleware/handle-request.js";
export { unknownRouteResponse } from "@octokit/oauth-app/dist-types/middleware/unknown-route-response.js";
export { createNodeMiddleware } from "@octokit/oauth-app/dist-types/middleware/node/index.js";
export { sendResponse as sendNodeResponse } from "@octokit/oauth-app/dist-types/middleware/node/send-response.js";
export { createWebWorkerHandler } from "@octokit/oauth-app/dist-types/middleware/web-worker/index.js";
export { createAWSLambdaAPIGatewayV2Handler } from "@octokit/oauth-app/dist-types/middleware/aws-lambda/api-gateway-v2.js";
export type { GetUserOctokitWithStateInterface } from "@octokit/oauth-app/dist-types/methods/get-user-octokit.js";
export type { GetWebFlowAuthorizationUrlInterface } from "@octokit/oauth-app/dist-types/methods/get-web-flow-authorization-url.js";
export type { CreateTokenInterface } from "@octokit/oauth-app/dist-types/methods/create-token.js";
export type { CheckTokenInterface } from "@octokit/oauth-app/dist-types/methods/check-token.js";
export type { ResetTokenInterface } from "@octokit/oauth-app/dist-types/methods/reset-token.js";
export type { RefreshTokenInterface } from "@octokit/oauth-app/dist-types/methods/refresh-token.js";
export type { ScopeTokenInterface } from "@octokit/oauth-app/dist-types/methods/scope-token.js";
export type { DeleteTokenInterface } from "@octokit/oauth-app/dist-types/methods/delete-token.js";
export type { DeleteAuthorizationInterface } from "@octokit/oauth-app/dist-types/methods/delete-authorization.js";
export type { AddEventHandler, ClientType, ClientTypeFromOptions, ConstructorOptions, OctokitTypeFromOptions, Options, } from "@octokit/oauth-app/dist-types/types.js";
type Constructor<T> = new (...args: any[]) => T;
export declare class OAuthApp<TOptions extends Options<ClientType> = Options<"oauth-app">> {
    static VERSION: string;
    static defaults<TDefaults extends Options<ClientType>, S extends Constructor<OAuthApp<TDefaults>>>(this: S, defaults: TDefaults): {
        new (...args: any[]): {
            type: ClientTypeFromOptions<TDefaults>;
            on: AddEventHandler<TDefaults>;
            octokit: OctokitTypeFromOptions<TDefaults>;
            getUserOctokit: GetUserOctokitWithStateInterface<ClientTypeFromOptions<TDefaults>>;
            getWebFlowAuthorizationUrl: GetWebFlowAuthorizationUrlInterface<ClientTypeFromOptions<TDefaults>>;
            createToken: CreateTokenInterface<ClientTypeFromOptions<TDefaults>>;
            checkToken: CheckTokenInterface<ClientTypeFromOptions<TDefaults>>;
            resetToken: ResetTokenInterface<ClientTypeFromOptions<TDefaults>>;
            refreshToken: RefreshTokenInterface;
            scopeToken: ScopeTokenInterface;
            deleteToken: DeleteTokenInterface;
            deleteAuthorization: DeleteAuthorizationInterface;
        };
    } & S;
    constructor(options: ConstructorOptions<TOptions>);
    type: ClientTypeFromOptions<TOptions>;
    on: AddEventHandler<TOptions>;
    octokit: OctokitTypeFromOptions<TOptions>;
    getUserOctokit: GetUserOctokitWithStateInterface<ClientTypeFromOptions<TOptions>>;
    getWebFlowAuthorizationUrl: GetWebFlowAuthorizationUrlInterface<ClientTypeFromOptions<TOptions>>;
    createToken: CreateTokenInterface<ClientTypeFromOptions<TOptions>>;
    checkToken: CheckTokenInterface<ClientTypeFromOptions<TOptions>>;
    resetToken: ResetTokenInterface<ClientTypeFromOptions<TOptions>>;
    refreshToken: RefreshTokenInterface;
    scopeToken: ScopeTokenInterface;
    deleteToken: DeleteTokenInterface;
    deleteAuthorization: DeleteAuthorizationInterface;
}
